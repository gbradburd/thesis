procrusteez <- function(obs.locs,target.locs,k,source.locs = NULL,option){#
	require(vegan)#
	proc.loc <- procrustes(obs.locs,target.locs,scale=TRUE)#
	if(option==1){#
		proc.pop.loc <- proc.loc$scale * target.locs %*% proc.loc$rotation + matrix(proc.loc$translation,nrow=k,ncol=2,byrow=TRUE)#
	} else if(option==2){#
		proc.pop.loc <- proc.loc$scale * source.locs %*% proc.loc$rotation + matrix(proc.loc$translation,nrow=k,ncol=2,byrow=TRUE)#
	}#
	return(proc.pop.loc)	#
}#
#
get.procrustes.locations.posterior.list <- function(observed.coords,population.coordinates.posterior){#
	target.coords.list <- vector(mode="list",length = length(population.coordinates.posterior))#
	source.coords.list <- vector(mode="list",length = length(population.coordinates.posterior))#
	k <- nrow(observed.coords)#
	for(i in 1:length(target.coords.list)){#
		target.coords.list[[i]] <- procrusteez(obs.locs = observed.coords,#
												target.locs = population.coordinates.posterior[[i]][1:k,],#
												k = k,#
												option = 1)#
		source.coords.list[[i]] <- procrusteez(obs.locs = observed.coords,#
												target.locs = population.coordinates.posterior[[i]][1:k,],#
												k = k,#
												source.locs = population.coordinates.posterior[[i]][(k+1):(2*k),],#
												option = 2)#
	}#
	return(list(target.coords.list= target.coords.list, source.coords.list= source.coords.list))#
}#
#
fade.admixture.source.points <- function(pop.cols,admix.proportions){#
	faded.colors <- numeric(length(pop.cols))#
	for(i in 1:length(pop.cols)){#
		faded.colors[i] <- adjustcolor(pop.cols[i],admix.proportions[i])#
	}#
	return(faded.colors)#
}#
#
load_MCMC_output <- function(MCMC.output.file){#
    tmpenv <- environment()#
	tmp <- load(MCMC.output.file,envir=tmpenv)#
	mcmc.output <- lapply(tmp,get,envir=tmpenv)#
	names(mcmc.output) <- tmp#
	return(mcmc.output)#
}#
#
get.posterior.location.matrix.from.list <- function(posterior.list,population.index){#
	post.location.matrix <- matrix(unlist(#
								lapply(posterior.list,#
									FUN=function(elem){elem[population.index,]})),#
								nrow=length(posterior.list),ncol=2,byrow=TRUE)#
	return(post.location.matrix)#
}#
#
get.credible.ellipse <- function(posterior.points,quantile){#
	require(MASS)#
	require(cluster)#
	fit <- cov.mve(posterior.points, quantile.used = nrow(posterior.points) * quantile)#
	points_in_ellipse <- posterior.points[fit$best, ]#
	ellipse_boundary <- predict(ellipsoidhull(points_in_ellipse))#
	return(ellipse_boundary)#
}#
#
plot.credible.ellipse <- function(ellipse_boundary,population.color,fading=0.3,lty=1){#
	polygon(ellipse_boundary,col=adjustcolor(population.color,fading),border=1,lty=lty)#
}#
#
make.spacemix.map.list <- function(MCMC.output.file,observed.coords,name.vector,color.vector,quantile=0.95){#
	MCMC.output <- load_MCMC_output(MCMC.output.file)#
	best <- which.max(MCMC.output$Prob)#
	admix.source.color.vector <- fade.admixture.source.points(color.vector,rowMeans(MCMC.output$admix.proportions))#
	k <- MCMC.output$last.params$k#
	target.coords <- procrusteez(observed.coords,MCMC.output$population.coordinates[[best]][1:k,],k,option=1)#
	source.coords <- procrusteez(observed.coords,MCMC.output$population.coordinates[[best]][1:k,],k,#
									source.locs=MCMC.output$population.coordinates[[best]][(k+1):(2*k),],option=2)#
	procrustes.coord.posterior.lists <- get.procrustes.locations.posterior.list(observed.coords= observed.coords,#
																				population.coordinates.posterior=MCMC.output$population.coordinates)#
	posterior.target.location.matrices <- lapply(1:k,get.posterior.location.matrix.from.list,posterior.list=procrustes.coord.posterior.lists$target.coords.list)#
	posterior.source.location.matrices <- lapply(1:k,get.posterior.location.matrix.from.list,posterior.list=procrustes.coord.posterior.lists$source.coords.list)#
	posterior.target.ellipses <- lapply(posterior.target.location.matrices,get.credible.ellipse,quantile)#
	posterior.source.ellipses <- lapply(posterior.source.location.matrices,get.credible.ellipse,quantile)#
	spacemix.map.list <- c(MCMC.output,#
							list(observed.coords=observed.coords),#
								list(name.vector=name.vector),list(color.vector=color.vector),#
								list(quantile=quantile),list(source=source),list(best = best),#
								list(admix.source.color.vector = admix.source.color.vector),#
								list(k = k),list(target.coords = target.coords),list(source.coords = source.coords),#
								list(procrustes.coord.posterior.lists = procrustes.coord.posterior.lists),#
								list(posterior.target.location.matrices = posterior.target.location.matrices),#
								list(posterior.source.location.matrices = posterior.source.location.matrices),#
								list(posterior.target.ellipses = posterior.target.ellipses),#
								list(posterior.source.ellipses = posterior.source.ellipses))#
	return(spacemix.map.list)#
}#
#
make.spacemix.map <- function(spacemix.map.list,text=FALSE,ellipses=TRUE,source.option=TRUE,xlim=NULL,ylim=NULL){#
	with(spacemix.map.list,{ #
		plot(target.coords,type='n',xlim=xlim,ylim=ylim,xlab="",ylab="")#
			if(ellipses){#
				lapply(1:k,FUN=function(i){plot.credible.ellipse(posterior.target.ellipses[[i]],color.vector[i])})#
			}#
			if(text){#
				text(target.coords,col=color.vector,font=2,labels=name.vector,cex=0.7)#
			}#
			if(source.option){#
				if(ellipses){#
					lapply(1:k,FUN=function(i){plot.credible.ellipse(posterior.source.ellipses[[i]],admix.source.color.vector[i],fading=1,lty=2)})#
				}#
				text(source.coords,col= admix.source.color.vector,font=3,labels=name.vector,cex=0.7)#
				arrows(	x0 = source.coords[,1],#
						y0 = source.coords[,2],#
						x1 = target.coords[,1],#
						y1 = target.coords[,2],#
						col= admix.source.color.vector,#
						lwd= spacemix.map.list $admix.proportions[,best],#
						length=0.1)#
			}#
				box(lwd=2)#
	})#
}#
#
query.spacemix.map <- function(focal.pops,spacemix.map.list,source.option=TRUE){#
	with(spacemix.map.list,{#
		# browser()#
		focal.indices <- match(focal.pops,name.vector)#
			for(i in 1:length(focal.indices)){#
				plot.credible.ellipse(posterior.target.ellipses[[focal.indices[i]]],color.vector[focal.indices[i]],fading=1)#
			}#
			if(source.option){#
				for(i in 1:length(focal.indices)){#
					plot.credible.ellipse(posterior.source.ellipses[[focal.indices[i]]], admix.source.color.vector[focal.indices[i]],fading=1,lty=2)#
				}#
				text(source.coords[focal.indices,,drop=FALSE],col=1,font=3,labels=name.vector[focal.indices])#
				arrows(	x0 = source.coords[focal.indices,1],#
						y0 = source.coords[focal.indices,2],#
						x1 = target.coords[focal.indices,1],#
						y1 = target.coords[focal.indices,2],#
						col= admix.source.color.vector[focal.indices[i]],#
						lwd=1,#
						length=0.1)#
			}#
			text(target.coords[focal.indices,,drop=FALSE],col=1,font=2,labels=name.vector[focal.indices],cex=1)#
				box(lwd=2)#
	})#
}#
#
get.credible.interval <- function(param.matrix,pop.order){#
	k <- nrow(param.matrix)#
	cred.intervals <- lapply(pop.order,FUN=function(i){quantile(param.matrix[i,],c(0.025,0.975))})#
	return(cred.intervals)#
}#
#
make.cred.bars <- function(quantile.vector,bar.width,color.vector,vert.line.width=NULL,pop.order=NULL){#
	# recover()#
	if(is.null(pop.order)){#
		pop.order <- 1:length(quantile.vector)#
	}#
	if(is.null(vert.line.width)){#
		vert.line.width <- 0.5#
	}#
	x.coord <- 1:k#
	color.vector <- color.vector[pop.order]#
	for(i in 1:length(quantile.vector)){#
		lines(x = c(x.coord[i]-bar.width/2,x.coord[i]+bar.width/2),#
				y = c(quantile.vector[[pop.order[i]]][1],quantile.vector[[pop.order[i]]][1]),col=color.vector[i])#
		lines(x = c(x.coord[i]-bar.width/2,x.coord[i]+bar.width/2),#
				y = c(quantile.vector[[pop.order[i]]][2],quantile.vector[[pop.order[i]]][2]),col=color.vector[i])#
		lines(x = c(x.coord[i],x.coord[i]),#
				y = quantile.vector[[pop.order[i]]],col=adjustcolor(color.vector[i],0.5),lwd= vert.line.width)#
	}#
}#
#
calculate.pairwise.pi <- function(ind1,ind2){#
	diff.homs = sum(ind1!=ind2 & abs(ind1-ind2)!=1 )#
	hets = sum(ind1==1 | ind2 ==1 )#
	return((diff.homs + hets/2)/length(ind1))#
}#
#
Covariance <- function(a0,aD,a2,GeoDist) {#
	covariance <- (1/a0)*exp(-(aD*GeoDist)^a2)#
	return(covariance)#
}#
#
admixed.Covariance <- function(covariance,admix.proportions,nugget,k,inv.mean.sample.sizes,ident.mat){#
	# recover()#
	if(any(admix.proportions !=0)){#
		w_k <- admix.proportions/2#
		admixed.Covariance <- 	tcrossprod((1-w_k),(1-w_k)) * 	covariance[1:k,1:k] + #
								tcrossprod((1-w_k),(w_k)) 	* 	covariance[1:k,(k+1):(2*k)] +#
								tcrossprod(w_k,(1-w_k)) 	*	covariance[(k+1):(2*k),1:k] +#
								tcrossprod(w_k,w_k)			*	covariance[(k+1):(2*k),(k+1):(2*k)]#
		admixed.Covariance <- admixed.Covariance + ident.mat * nugget + ident.mat * inv.mean.sample.sizes#
	} else {#
		admixed.Covariance <- covariance[1:k,1:k] + ident.mat * nugget + ident.mat * inv.mean.sample.sizes#
	}#
	return(admixed.Covariance)#
}#
#
transformed.Covariance <- function(covariance,projection.matrix){#
	transformed.covariance <- #
		crossprod(projection.matrix,covariance) %*% projection.matrix#
	return(transformed.covariance)		#
}#
#
get.mean.sample.size <- function(sample.sizes){#
	mean.sample.size <- mean(sample.sizes[which(sample.sizes!=0)])#
	return(mean.sample.size)#
}#
#
get.transformation.matrix <- function(mean.sample.sizes){#
	k <- length(mean.sample.sizes)#
	transformation.matrix <- diag(k) - matrix(mean.sample.sizes/(sum(mean.sample.sizes)),nrow=k,ncol=k,byrow=TRUE)#
	return(transformation.matrix)#
}#
#
ff.text <- function ( xy, labels, rep.fact=4, attr.fact=0.2, col="black", text.cex=1, xlim, ylim, ... ) {#
    # a try at expanding labels. #
    txy <- FFieldPtRep( xy, rep.fact=4 )#
    if (missing(xlim)) { xlim <- range(xy[,1],txy[,1]) }#
    if (missing(ylim)) { ylim <- range(xy[,2],txy[,2]) }#
    plot( xy, pch=20, col=adjustcolor(col,.5), xlim=xlim, ylim=ylim, ... )#
    text( txy, labels=pops, col=col, cex=text.cex, ... )#
    segments( x0=xy[,1], x1=txy[,1], y0=xy[,2], y1=txy[,2], lwd=2, col=adjustcolor(col,.25) )#
}#
#
get.sample.covariance <- function(counts,sample.sizes){#
	sample.frequencies <- counts/sample.sizes#
	mean.sample.sizes <- rowMeans(sample.sizes)#
	mean.sample.frequencies <- matrix(apply(sample.frequencies,2,#
											get.weighted.mean.frequency,#
											mean.sample.sizes=mean.sample.sizes),#
									nrow=length(mean.sample.sizes),ncol=ncol(sample.frequencies),byrow=TRUE)#
	normalized.sample.frequencies <- sample.frequencies/sqrt(mean.sample.frequencies*(1-mean.sample.frequencies))#
	sample.covariance <- cov(t(normalized.sample.frequencies),use="pairwise.complete.obs")#
	loci <- ncol(sample.frequencies)#
	return(list("sample.covariance" = sample.covariance,#
				"mean.sample.sizes" = mean.sample.sizes,#
				"loci" = loci))#
}#
#
get.weighted.mean.frequency <- function(sample.frequencies,mean.sample.sizes){#
	na.pops <- which(is.na(sample.frequencies))#
	if(sum(na.pops) > 0){#
		sample.frequencies <- sample.frequencies[-na.pops]#
		mean.sample.sizes <- mean.sample.sizes[-na.pops]#
	}#
	weighted.sample.frequencies <- mean.sample.sizes*sample.frequencies#
	sample.frequency.weighted.mean <- sum(weighted.sample.frequencies)/sum(mean.sample.sizes)#
	return(sample.frequency.weighted.mean)#
}
load("~/Desktop/Dropbox/space.mix/data/globetrotter/globe_spacemix/globe_spaceruns/rand_prior2/globetrotter_dataset.Robj")#
#
	globe.coords <- cbind(globetrotter.long, globetrotter.lat)#
	pops <- row.names(globetrotter.counts)#
	k <- length(pops)#
#
		continent.col <- numeric(k)#
			continent.col[which(globetrotter.long < -50)] <- "orange"#
			continent.col[match(c("BantuKenya","BantuSouthAfrica","BiakaPygmy",#
									"Egyptian","Ethiopian","EthiopianJew","Hadza","Mandenka",#
									"MbutiPygmy","Moroccan","Mozabite","Sandawe","SanNamibia",#
									"SanKhomani","Tunisian","Yoruba"),pops)] <- "forestgreen"#
		continent.col[which(globetrotter.long > 100 &#
							globetrotter.lat < 5)] <- "brown"#
		continent.col[which(continent.col==0)] <- rainbow(length(continent.col[which(continent.col==0)]),#
															start=4/6,end=6/6)[as.numeric(cut(globetrotter.long[which(continent.col==0)],length(which(continent.col==0))))]#
		americas <- which(continent.col=="orange")#
		africa <- which(continent.col=="forestgreen")#
		oceania <- which(continent.col=="brown")#
		east.asia <- which(globetrotter.long > 95 & #
								globetrotter.lat > 11.5)#
		western.eurasia <- c(1:k)[-c(americas,africa,oceania,east.asia)]#
		eurasia <- c(1:k)[-c(americas,africa,oceania)]#
#
		# af.eff.lat <- (globetrotter.lat[africa] + abs(min(globetrotter.lat[africa])))/max(globetrotter.lat[africa] + abs(min(globetrotter.lat[africa])))#
		af.loc.cols <- hsv(h = seq(0.22,0.69,length.out=length(africa))[rank(globetrotter.lat[africa])],#
				s = 1,#
				v = 1)#
		adj.nonamaf.long <- globetrotter.long[-c(africa,americas)] + abs(min(globe.coords[western.eurasia,1]))#
		eur.eff.long <- adj.nonamaf.long/max(adj.nonamaf.long)#
		eur.loc.cols <- hsv(h = eur.eff.long * 0.4 + 0.6,s=1,v=1)#
		am.eff.long <- (globetrotter.long[americas] + abs(min(globetrotter.long[americas])))/max(globetrotter.long[americas] + abs(min(globetrotter.long[americas])))#
		am.loc.cols <- hsv(h = (am.eff.long) * 0.08 + 0.03,s=1,v=1)#
		continent.col <- numeric(k)#
		continent.col[americas] <- am.loc.cols#
		continent.col[africa] <- af.loc.cols#
		continent.col[-c(africa,americas)] <- eur.loc.cols#
#
	abbreviate <- function(pop.names){#
	# recover()#
		k <- length(pop.names)#
		abbrevs <- numeric(k)#
		for(i in 1:k){#
			z <- 2#
			pop.letters <- strsplit(pop.names[i],"")[[1]]#
			pop.abbrev <- paste(pop.letters[1],pop.letters[z],sep="")#
			while(any(grep(pop.abbrev,abbrevs)) & z < length(pop.letters)){#
				z <- z + 1#
				pop.abbrev <- paste(pop.letters[1],pop.letters[z],sep="")#
			}#
			if(z > length(strsplit(pop.names[i],"")[[1]])){#
				stop("uh oh")#
			}#
			abbrevs[i] <- pop.abbrev#
		}#
		return(abbrevs)#
	}#
	abbrevs <- abbreviate(pops)
mcn.cov.list <- get.sample.covariance(globetrotter.counts,globetrotter.sample.sizes)#
mcn.cov.hat <- mcn.cov.list$sample.covariance#
obs.D <- fields::rdist.earth(globe.coords)#
index.mat <- upper.tri(obs.D,diag=FALSE)#
color.mat1 <- matrix(0,nrow=k,ncol=k)#
color.mat2 <- matrix(0,nrow=k,ncol=k)#
	for(i in 1:k){#
		for(j in 1:k){#
			color.mat1[i,j] <- continent.col[i]#
			color.mat2[i,j] <- continent.col[j]#
		}#
	}
cov_hat <- cov(t(globetrotter.counts/globetrotter.sample.sizes),use="pairwise.complete.obs")#
mean.centering.matrix <- get.transformation.matrix(apply(globetrotter.sample.sizes,1,get.mean.sample.size))#
mc.cov_hat <- mean.centering.matrix %*% cov_hat %*% t(mean.centering.matrix)#
#
pc.coords <- cbind(eigen(mc.cov_hat)$vectors[,1],eigen(mc.cov_hat)$vectors[,2])#
proc.pc.coords <- fitted(vegan::procrustes(globe.coords,pc.coords))#
	pc1.var <- eigen(mc.cov_hat)$values[1] / sum(eigen(mc.cov_hat)$values)#
	pc2.var <- eigen(mc.cov_hat)$values[2] / sum(eigen(mc.cov_hat)$values)
plot(proc.pc.coords,type='n',#
				main = "PCA map of Human samples",#
				xlab = paste("PC1 (",signif(100*pc1.var,3),"%)",sep=""),#
				ylab  = paste("PC2 (",signif(100*pc2.var,3),"%)",sep=""))#
		text(proc.pc.coords,col=continent.col,labels=abbrevs,font=2,cex=0.9)
TeachingDemos::subplot(fun = {#
									box(lwd=1)#
									},#
									x = c(45,70),y = c(-20,5))
TeachingDemos::subplot(fun = {#
									box(lwd=1)#
									},#
									x = c(45,75),y = c(-25,5))
subplot2.x.coords <- c(-165,180)#
subplot2.y.coords <- c(-60,80)
TeachingDemos::subplot(fun = {#
									plot(0,xlim=subplot2.x.coords,ylim=subplot2.y.coords,type='n',yaxt='n',xaxt='n',xlab="",ylab="")#
									map(database="world",interior=FALSE,add=TRUE,xlim=subplot2.x.coords,ylim=subplot2.y.coords,lwd=0.5); #
									points(globe.coords,pch=20,col=continent.col,cex=1.2) ; #
									box(lwd=1.1)#
									}, x = c(45,75),y = c(-25,5))
require(maps)
TeachingDemos::subplot(fun = {#
									plot(0,xlim=subplot2.x.coords,ylim=subplot2.y.coords,type='n',yaxt='n',xaxt='n',xlab="",ylab="")#
									map(database="world",interior=FALSE,add=TRUE,xlim=subplot2.x.coords,ylim=subplot2.y.coords,lwd=0.5); #
									points(globe.coords,pch=20,col=continent.col,cex=1.2) ; #
									box(lwd=1.1)#
									}, x = c(45,75),y = c(-25,5))
plot(proc.pc.coords,type='n',#
				main = "PCA map of Human samples",#
				xlab = paste("PC1 (",signif(100*pc1.var,3),"%)",sep=""),#
				ylab  = paste("PC2 (",signif(100*pc2.var,3),"%)",sep=""))#
		text(proc.pc.coords,col=continent.col,labels=abbrevs,font=2,cex=0.9)#
			TeachingDemos::subplot(fun = {#
									plot(0,xlim=subplot2.x.coords,ylim=subplot2.y.coords,type='n',yaxt='n',xaxt='n',xlab="",ylab="")#
									map(database="world",interior=FALSE,add=TRUE,xlim=subplot2.x.coords,ylim=subplot2.y.coords,lwd=0.5); #
									text(globe.coords,labels=abbrevs,col=continent.col,cex=1.2) ; #
									box(lwd=1.1)#
									}, x = c(45,75),y = c(-20,5))
quartz(width=6,height=6)#
		plot(proc.pc.coords,type='n',#
				main = "PCA map of Human samples",#
				xlab = paste("PC1 (",signif(100*pc1.var,3),"%)",sep=""),#
				ylab  = paste("PC2 (",signif(100*pc2.var,3),"%)",sep=""))#
		text(proc.pc.coords,col=continent.col,labels=abbrevs,font=2,cex=0.9)#
			TeachingDemos::subplot(fun = {#
									plot(0,xlim=subplot2.x.coords,ylim=subplot2.y.coords,type='n',yaxt='n',xaxt='n',xlab="",ylab="")#
									map(database="world",interior=FALSE,add=TRUE,xlim=subplot2.x.coords,ylim=subplot2.y.coords,lwd=0.5,col="gray"); #
									text(globe.coords,labels=abbrevs,col=continent.col,cex=0.8) ; #
									box(lwd=1.1)#
									}, x = c(45,75),y = c(-20,5))
plot(proc.pc.coords,type='n',#
				main = "PCA map of Human samples",#
				xlab = paste("PC1 (",signif(100*pc1.var,3),"%)",sep=""),#
				ylab  = paste("PC2 (",signif(100*pc2.var,3),"%)",sep=""))#
		text(proc.pc.coords,col=continent.col,labels=abbrevs,font=2,cex=0.9)#
			TeachingDemos::subplot(fun = {#
									plot(0,xlim=subplot2.x.coords,ylim=subplot2.y.coords,type='n',yaxt='n',xaxt='n',xlab="",ylab="")#
									map(database="world",interior=FALSE,add=TRUE,xlim=subplot2.x.coords,ylim=subplot2.y.coords,lwd=0.5,col="gray"); #
									text(globe.coords,labels=abbrevs,col=continent.col,cex=0.8) ; #
									box(lwd=1.1)#
									}, x = c(40,75),y = c(-25,10))
plot(proc.pc.coords,type='n',#
				main = "PCA map of Human samples",#
				xlab = paste("PC1 (",signif(100*pc1.var,3),"%)",sep=""),#
				ylab  = paste("PC2 (",signif(100*pc2.var,3),"%)",sep=""))#
		text(proc.pc.coords,col=continent.col,labels=abbrevs,font=2,cex=0.9)#
			TeachingDemos::subplot(fun = {#
									plot(0,xlim=subplot2.x.coords,ylim=subplot2.y.coords,type='n',yaxt='n',xaxt='n',xlab="",ylab="")#
									map(database="world",interior=FALSE,add=TRUE,xlim=subplot2.x.coords,ylim=subplot2.y.coords,lwd=0.5,col="gray"); #
									text(globe.coords,labels=abbrevs,col=continent.col,cex=0.7) ; #
									box(lwd=1.1)#
									}, x = c(40,75),y = c(-25,10))
box(lwd=2)
pdf(file="~/Desktop/Dropbox/space.mix/ms/figs/globetrotter/globe_PCA_map.pdf",width=6,height=6)#
		#quartz(width=6,height=6)#
		plot(proc.pc.coords,type='n',#
				main = "PCA map of human samples",#
				xlab = paste("PC1 (",signif(100*pc1.var,3),"%)",sep=""),#
				ylab  = paste("PC2 (",signif(100*pc2.var,3),"%)",sep=""))#
		text(proc.pc.coords,col=continent.col,labels=abbrevs,font=2,cex=0.9)#
			TeachingDemos::subplot(fun = {#
									plot(0,xlim=subplot2.x.coords,ylim=subplot2.y.coords,type='n',yaxt='n',xaxt='n',xlab="",ylab="")#
									map(database="world",interior=FALSE,add=TRUE,xlim=subplot2.x.coords,ylim=subplot2.y.coords,lwd=0.5,col="gray"); #
									text(globe.coords,labels=abbrevs,col=continent.col,cex=0.7) ; #
									box(lwd=1.1)#
									}, x = c(40,75),y = c(-25,10))#
	box(lwd=2)#
	dev.off()
rm(list=ls())
gc()
